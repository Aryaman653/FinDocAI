"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/documents/upload";
exports.ids = ["pages/api/documents/upload"];
exports.modules = {

/***/ "@prisma/client":
/*!*********************************!*\
  !*** external "@prisma/client" ***!
  \*********************************/
/***/ ((module) => {

module.exports = require("@prisma/client");

/***/ }),

/***/ "next/dist/compiled/next-server/pages-api.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/pages-api.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/pages-api.runtime.dev.js");

/***/ }),

/***/ "tesseract.js":
/*!*******************************!*\
  !*** external "tesseract.js" ***!
  \*******************************/
/***/ ((module) => {

module.exports = require("tesseract.js");

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

module.exports = require("fs");

/***/ }),

/***/ "fs/promises":
/*!******************************!*\
  !*** external "fs/promises" ***!
  \******************************/
/***/ ((module) => {

module.exports = require("fs/promises");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("path");

/***/ }),

/***/ "@google/generative-ai":
/*!****************************************!*\
  !*** external "@google/generative-ai" ***!
  \****************************************/
/***/ ((module) => {

module.exports = import("@google/generative-ai");;

/***/ }),

/***/ "formidable":
/*!*****************************!*\
  !*** external "formidable" ***!
  \*****************************/
/***/ ((module) => {

module.exports = import("formidable");;

/***/ }),

/***/ "zod":
/*!**********************!*\
  !*** external "zod" ***!
  \**********************/
/***/ ((module) => {

module.exports = import("zod");;

/***/ }),

/***/ "(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fdocuments%2Fupload&preferredRegion=&absolutePagePath=.%2Fsrc%2Fpages%2Fapi%2Fdocuments%2Fupload.ts&middlewareConfigBase64=e30%3D!":
/*!************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fdocuments%2Fupload&preferredRegion=&absolutePagePath=.%2Fsrc%2Fpages%2Fapi%2Fdocuments%2Fupload.ts&middlewareConfigBase64=e30%3D! ***!
  \************************************************************************************************************************************************************************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   routeModule: () => (/* binding */ routeModule)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/pages-api/module.compiled */ \"(api)/./node_modules/next/dist/server/future/route-modules/pages-api/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(api)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/build/templates/helpers */ \"(api)/./node_modules/next/dist/build/templates/helpers.js\");\n/* harmony import */ var _src_pages_api_documents_upload_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./src/pages/api/documents/upload.ts */ \"(api)/./src/pages/api/documents/upload.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_src_pages_api_documents_upload_ts__WEBPACK_IMPORTED_MODULE_3__]);\n_src_pages_api_documents_upload_ts__WEBPACK_IMPORTED_MODULE_3__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\n\n// Import the userland code.\n\n// Re-export the handler (should be the default export).\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_src_pages_api_documents_upload_ts__WEBPACK_IMPORTED_MODULE_3__, \"default\"));\n// Re-export config.\nconst config = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_src_pages_api_documents_upload_ts__WEBPACK_IMPORTED_MODULE_3__, \"config\");\n// Create and export the route module that will be consumed.\nconst routeModule = new next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__.PagesAPIRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.PAGES_API,\n        page: \"/api/documents/upload\",\n        pathname: \"/api/documents/upload\",\n        // The following aren't used in production.\n        bundlePath: \"\",\n        filename: \"\"\n    },\n    userland: _src_pages_api_documents_upload_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n\n//# sourceMappingURL=pages-api.js.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LXJvdXRlLWxvYWRlci9pbmRleC5qcz9raW5kPVBBR0VTX0FQSSZwYWdlPSUyRmFwaSUyRmRvY3VtZW50cyUyRnVwbG9hZCZwcmVmZXJyZWRSZWdpb249JmFic29sdXRlUGFnZVBhdGg9LiUyRnNyYyUyRnBhZ2VzJTJGYXBpJTJGZG9jdW1lbnRzJTJGdXBsb2FkLnRzJm1pZGRsZXdhcmVDb25maWdCYXNlNjQ9ZTMwJTNEISIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7OztBQUFzRztBQUN2QztBQUNMO0FBQzFEO0FBQ2dFO0FBQ2hFO0FBQ0EsaUVBQWUsd0VBQUssQ0FBQywrREFBUSxZQUFZLEVBQUM7QUFDMUM7QUFDTyxlQUFlLHdFQUFLLENBQUMsK0RBQVE7QUFDcEM7QUFDTyx3QkFBd0IsZ0hBQW1CO0FBQ2xEO0FBQ0EsY0FBYyx5RUFBUztBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLFlBQVk7QUFDWixDQUFDOztBQUVELHFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZmluYW5jaWFsLWRvYy1pbnRlbGxpZ2VuY2UvP2NiMDIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUGFnZXNBUElSb3V0ZU1vZHVsZSB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2Z1dHVyZS9yb3V0ZS1tb2R1bGVzL3BhZ2VzLWFwaS9tb2R1bGUuY29tcGlsZWRcIjtcbmltcG9ydCB7IFJvdXRlS2luZCB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2Z1dHVyZS9yb3V0ZS1raW5kXCI7XG5pbXBvcnQgeyBob2lzdCB9IGZyb20gXCJuZXh0L2Rpc3QvYnVpbGQvdGVtcGxhdGVzL2hlbHBlcnNcIjtcbi8vIEltcG9ydCB0aGUgdXNlcmxhbmQgY29kZS5cbmltcG9ydCAqIGFzIHVzZXJsYW5kIGZyb20gXCIuL3NyYy9wYWdlcy9hcGkvZG9jdW1lbnRzL3VwbG9hZC50c1wiO1xuLy8gUmUtZXhwb3J0IHRoZSBoYW5kbGVyIChzaG91bGQgYmUgdGhlIGRlZmF1bHQgZXhwb3J0KS5cbmV4cG9ydCBkZWZhdWx0IGhvaXN0KHVzZXJsYW5kLCBcImRlZmF1bHRcIik7XG4vLyBSZS1leHBvcnQgY29uZmlnLlxuZXhwb3J0IGNvbnN0IGNvbmZpZyA9IGhvaXN0KHVzZXJsYW5kLCBcImNvbmZpZ1wiKTtcbi8vIENyZWF0ZSBhbmQgZXhwb3J0IHRoZSByb3V0ZSBtb2R1bGUgdGhhdCB3aWxsIGJlIGNvbnN1bWVkLlxuZXhwb3J0IGNvbnN0IHJvdXRlTW9kdWxlID0gbmV3IFBhZ2VzQVBJUm91dGVNb2R1bGUoe1xuICAgIGRlZmluaXRpb246IHtcbiAgICAgICAga2luZDogUm91dGVLaW5kLlBBR0VTX0FQSSxcbiAgICAgICAgcGFnZTogXCIvYXBpL2RvY3VtZW50cy91cGxvYWRcIixcbiAgICAgICAgcGF0aG5hbWU6IFwiL2FwaS9kb2N1bWVudHMvdXBsb2FkXCIsXG4gICAgICAgIC8vIFRoZSBmb2xsb3dpbmcgYXJlbid0IHVzZWQgaW4gcHJvZHVjdGlvbi5cbiAgICAgICAgYnVuZGxlUGF0aDogXCJcIixcbiAgICAgICAgZmlsZW5hbWU6IFwiXCJcbiAgICB9LFxuICAgIHVzZXJsYW5kXG59KTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cGFnZXMtYXBpLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fdocuments%2Fupload&preferredRegion=&absolutePagePath=.%2Fsrc%2Fpages%2Fapi%2Fdocuments%2Fupload.ts&middlewareConfigBase64=e30%3D!\n");

/***/ }),

/***/ "(api)/./src/lib/prisma.ts":
/*!***************************!*\
  !*** ./src/lib/prisma.ts ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   prisma: () => (/* binding */ prisma)\n/* harmony export */ });\n/* harmony import */ var _prisma_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @prisma/client */ \"@prisma/client\");\n/* harmony import */ var _prisma_client__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_prisma_client__WEBPACK_IMPORTED_MODULE_0__);\n\nconst prisma = global.prisma || new _prisma_client__WEBPACK_IMPORTED_MODULE_0__.PrismaClient();\nif (true) {\n    global.prisma = prisma;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9zcmMvbGliL3ByaXNtYS50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBOEM7QUFNdkMsTUFBTUMsU0FBU0MsT0FBT0QsTUFBTSxJQUFJLElBQUlELHdEQUFZQSxHQUFHO0FBRTFELElBQUlHLElBQXlCLEVBQWM7SUFDekNELE9BQU9ELE1BQU0sR0FBR0E7QUFDbEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9maW5hbmNpYWwtZG9jLWludGVsbGlnZW5jZS8uL3NyYy9saWIvcHJpc21hLnRzPzAxZDciXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUHJpc21hQ2xpZW50IH0gZnJvbSAnQHByaXNtYS9jbGllbnQnO1xuXG5kZWNsYXJlIGdsb2JhbCB7XG4gIHZhciBwcmlzbWE6IFByaXNtYUNsaWVudCB8IHVuZGVmaW5lZDtcbn1cblxuZXhwb3J0IGNvbnN0IHByaXNtYSA9IGdsb2JhbC5wcmlzbWEgfHwgbmV3IFByaXNtYUNsaWVudCgpO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBnbG9iYWwucHJpc21hID0gcHJpc21hO1xufSAiXSwibmFtZXMiOlsiUHJpc21hQ2xpZW50IiwicHJpc21hIiwiZ2xvYmFsIiwicHJvY2VzcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(api)/./src/lib/prisma.ts\n");

/***/ }),

/***/ "(api)/./src/pages/api/documents/upload.ts":
/*!*******************************************!*\
  !*** ./src/pages/api/documents/upload.ts ***!
  \*******************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config),\n/* harmony export */   \"default\": () => (/* binding */ handler)\n/* harmony export */ });\n/* harmony import */ var _utils_gemini__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/utils/gemini */ \"(api)/./src/utils/gemini.ts\");\n/* harmony import */ var _lib_prisma__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/prisma */ \"(api)/./src/lib/prisma.ts\");\n/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! zod */ \"zod\");\n/* harmony import */ var formidable__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! formidable */ \"formidable\");\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! fs */ \"fs\");\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(fs__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! path */ \"path\");\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(path__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var fs_promises__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! fs/promises */ \"fs/promises\");\n/* harmony import */ var fs_promises__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(fs_promises__WEBPACK_IMPORTED_MODULE_6__);\n/* harmony import */ var tesseract_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! tesseract.js */ \"tesseract.js\");\n/* harmony import */ var tesseract_js__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(tesseract_js__WEBPACK_IMPORTED_MODULE_7__);\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_utils_gemini__WEBPACK_IMPORTED_MODULE_0__, zod__WEBPACK_IMPORTED_MODULE_2__, formidable__WEBPACK_IMPORTED_MODULE_3__]);\n([_utils_gemini__WEBPACK_IMPORTED_MODULE_0__, zod__WEBPACK_IMPORTED_MODULE_2__, formidable__WEBPACK_IMPORTED_MODULE_3__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n\n\n\n\n\n\n\n\nconst uploadSchema = zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n    file: zod__WEBPACK_IMPORTED_MODULE_2__.z.any(),\n    fileName: zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n    documentType: zod__WEBPACK_IMPORTED_MODULE_2__.z.enum([\n        \"BANK_STATEMENT\",\n        \"INVOICE\",\n        \"RECEIPT\",\n        \"OTHER\"\n    ])\n});\nconst config = {\n    api: {\n        bodyParser: false\n    }\n};\n// Helper function to clean up extracted text\nfunction cleanText(text) {\n    // Fix common OCR mistakes in bank statements\n    const replacements = {\n        // Numbers\n        \"o\": \"0\",\n        \"O\": \"0\",\n        \"l\": \"1\",\n        \"L\": \"1\",\n        \"s\": \"5\",\n        \"S\": \"5\",\n        \"g\": \"6\",\n        \"G\": \"6\",\n        \"t\": \"7\",\n        \"T\": \"7\",\n        \"b\": \"8\",\n        \"B\": \"8\",\n        \"q\": \"9\",\n        \"Q\": \"9\",\n        \"z\": \"2\",\n        \"Z\": \"2\",\n        // Letters\n        \"8ank\": \"Bank\",\n        \"8u5ine55\": \"Business\",\n        \"Acc0un7\": \"Account\",\n        \"5a7emen7\": \"Statement\",\n        \"R0ya1\": \"Royal\",\n        \"M0N7REA1\": \"Montreal\",\n        \"Ju1y\": \"July\",\n        \"Au6u57\": \"August\",\n        \"57W\": \"St W\",\n        \"0N\": \"ON\",\n        \"M5V\": \"MSV\",\n        \"P1ea5e\": \"Please\",\n        \"c0n7ac7\": \"contact\",\n        \"8ankin6\": \"Banking\",\n        \"repre5en7a7ive\": \"representative\",\n        \"ca11\": \"call\",\n        \"Acc0un75ummary\": \"Account Summary\",\n        \"E55en7ia15\": \"Essentials\",\n        \"Varia81e\": \"Variable\",\n        \"Pricin6\": \"Pricing\",\n        \"PER7H\": \"Perth\",\n        \"0penin6\": \"Opening\",\n        \"dep05i75\": \"deposits\",\n        \"credi75\": \"credits\",\n        \"che9ue5\": \"cheques\",\n        \"de8i75\": \"debits\",\n        \"C105in6\": \"Closing\",\n        \"Ac7ivi7y\": \"Activity\",\n        \"De7ai15\": \"Details\",\n        \"De5crip7i0n\": \"Description\",\n        \"Che9ue\": \"Cheque\",\n        \"De8i7\": \"Debit\",\n        \"Dep05i7\": \"Deposit\",\n        \"Credi7\": \"Credit\",\n        \"8a1ance\": \"Balance\",\n        \"Mi5c\": \"Misc\",\n        \"Paymen7\": \"Payment\",\n        \"FEE5\": \"FEE\",\n        \"In5urance\": \"Insurance\",\n        \"5UN\": \"SUN\",\n        \"1IFE\": \"LIFE\",\n        \"RE6U1AR\": \"REGULAR\",\n        \"C0MMERCIA1\": \"COMMERCIAL\",\n        \"IN5\": \"INS\",\n        \"FEDERA7ED\": \"FEDERATED\",\n        \"IN5UR\": \"INSUR\"\n    };\n    // Apply replacements\n    Object.entries(replacements).forEach(([wrong, correct])=>{\n        text = text.replace(new RegExp(wrong, \"g\"), correct);\n    });\n    // Fix spacing around numbers and currency\n    text = text.replace(/(\\d)\\s+(\\d)/g, \"$1$2\") // Remove spaces between digits\n    .replace(/([.,])\\s+(\\d)/g, \"$1$2\") // Remove spaces after decimal points\n    .replace(/([A-Za-z])\\s+(\\d)/g, \"$1$2\") // Remove spaces between letters and numbers\n    .replace(/(\\d)\\s+([A-Za-z])/g, \"$1$2\"); // Remove spaces between numbers and letters\n    // Fix date formats\n    text = text.replace(/(\\d{1,2})\\s+([A-Za-z]+),\\s+(\\d{4})/g, \"$1 $2, $3\").replace(/([A-Za-z]+)\\s+(\\d{1,2}),\\s+(\\d{4})/g, \"$1 $2, $3\");\n    // Fix account numbers\n    text = text.replace(/(\\d{4})\\s*-\\s*(\\d{3})\\s*-\\s*(\\d{3})/g, \"$1-$2-$3\").replace(/(\\d{3})\\s*-\\s*(\\d{4})\\s*-\\s*(\\d{4})/g, \"$1-$2-$3\");\n    return text;\n}\nasync function extractTextFromFile(filePath, mimeType) {\n    if (mimeType.startsWith(\"image/\")) {\n        // Initialize worker with config\n        const workerConfig = {\n            tessedit_char_whitelist: \"0123456789.,ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz/- \",\n            tessedit_pageseg_mode: tesseract_js__WEBPACK_IMPORTED_MODULE_7__.PSM.SINGLE_BLOCK\n        };\n        const worker = await (0,tesseract_js__WEBPACK_IMPORTED_MODULE_7__.createWorker)();\n        try {\n            await worker.reinitialize(\"eng\");\n            await worker.setParameters(workerConfig);\n            const { data: { text, confidence } } = await worker.recognize(filePath);\n            console.log(\"OCR Confidence:\", confidence);\n            if (confidence < 50) {\n                console.warn(\"Low OCR confidence:\", confidence);\n            }\n            return cleanText(text);\n        } catch (error) {\n            console.error(\"OCR Error:\", error);\n            throw new Error(\"Failed to extract text from image: \" + (error instanceof Error ? error.message : \"Unknown error\"));\n        } finally{\n            await worker.terminate();\n        }\n    } else if (mimeType === \"application/pdf\") {\n        // For PDFs, we'll need to use a different approach since pdf.js is browser-only\n        // For now, we'll return an empty string and log a warning\n        console.warn(\"PDF processing is not supported in the API route. Please use the browser version.\");\n        return \"\";\n    } else {\n        throw new Error(\"Unsupported file type\");\n    }\n}\nasync function handler(req, res) {\n    if (req.method !== \"POST\") {\n        return res.status(405).json({\n            error: \"Method not allowed\"\n        });\n    }\n    try {\n        console.log(\"Starting file upload process...\");\n        // Parse multipart form data\n        console.log(\"Parsing form data...\");\n        const formData = await new Promise((resolve, reject)=>{\n            const form = (0,formidable__WEBPACK_IMPORTED_MODULE_3__[\"default\"])({\n                keepExtensions: true,\n                maxFileSize: 10 * 1024 * 1024,\n                maxFieldsSize: 10 * 1024 * 1024,\n                multiples: false\n            });\n            form.parse(req, (err, fields, files)=>{\n                if (err) {\n                    console.error(\"Formidable parse error:\", err);\n                    reject(err);\n                }\n                resolve({\n                    fields,\n                    files\n                });\n            });\n        });\n        console.log(\"Form data parsed successfully\");\n        const { fields, files } = formData;\n        if (!files.file || !files.file[0]) {\n            console.error(\"No file uploaded\");\n            return res.status(400).json({\n                error: \"No file uploaded\"\n            });\n        }\n        const file = files.file[0];\n        console.log(\"File details:\", {\n            originalFilename: file.originalFilename,\n            mimetype: file.mimetype,\n            size: file.size,\n            filepath: file.filepath\n        });\n        // Validate input\n        console.log(\"Validating input data...\");\n        const validatedData = uploadSchema.parse({\n            file,\n            fileName: fields.fileName?.[0] || file.originalFilename,\n            documentType: fields.documentType?.[0] || \"OTHER\"\n        });\n        console.log(\"Input validation successful\");\n        // Create uploads directory if it doesn't exist\n        console.log(\"Creating uploads directory...\");\n        const uploadDir = (0,path__WEBPACK_IMPORTED_MODULE_5__.join)(process.cwd(), \"uploads\");\n        try {\n            await (0,fs_promises__WEBPACK_IMPORTED_MODULE_6__.mkdir)(uploadDir, {\n                recursive: true\n            });\n            console.log(\"Uploads directory ready\");\n        } catch (error) {\n            console.error(\"Error creating uploads directory:\", error);\n            throw new Error(\"Failed to create uploads directory\");\n        }\n        // Save file to uploads directory\n        console.log(\"Saving file to uploads directory...\");\n        const filePath = (0,path__WEBPACK_IMPORTED_MODULE_5__.join)(uploadDir, file.newFilename);\n        try {\n            const fileBuffer = await new Promise((resolve, reject)=>{\n                const chunks = [];\n                (0,fs__WEBPACK_IMPORTED_MODULE_4__.createReadStream)(file.filepath).on(\"data\", (chunk)=>{\n                    if (typeof chunk === \"string\") {\n                        chunks.push(Buffer.from(chunk));\n                    } else {\n                        chunks.push(chunk);\n                    }\n                }).on(\"end\", ()=>resolve(Buffer.concat(chunks))).on(\"error\", reject);\n            });\n            await (0,fs_promises__WEBPACK_IMPORTED_MODULE_6__.writeFile)(filePath, fileBuffer);\n            console.log(\"File saved successfully\");\n        } catch (error) {\n            console.error(\"Error saving file:\", error);\n            throw new Error(\"Failed to save file\");\n        }\n        // Extract text from document\n        console.log(\"Extracting text from document...\");\n        let text;\n        try {\n            text = await extractTextFromFile(filePath, file.mimetype);\n            console.log(\"Text extracted successfully\");\n        } catch (error) {\n            console.error(\"Error extracting text:\", error);\n            throw new Error(\"Failed to extract text from document\");\n        }\n        // Analyze document with Gemini\n        console.log(\"Analyzing document with Gemini...\");\n        let analysis;\n        try {\n            analysis = await (0,_utils_gemini__WEBPACK_IMPORTED_MODULE_0__.analyzeFinancialDocument)(text);\n            console.log(\"Analysis completed successfully\");\n        } catch (error) {\n            console.error(\"Error analyzing document:\", error);\n            throw new Error(\"Failed to analyze document\");\n        }\n        // Get or create default user\n        console.log(\"Getting or creating default user...\");\n        let defaultUser;\n        try {\n            defaultUser = await _lib_prisma__WEBPACK_IMPORTED_MODULE_1__.prisma.user.findFirst({\n                where: {\n                    email: \"default@example.com\"\n                }\n            });\n            if (!defaultUser) {\n                console.log(\"Default user not found, creating new one...\");\n                defaultUser = await _lib_prisma__WEBPACK_IMPORTED_MODULE_1__.prisma.user.create({\n                    data: {\n                        email: \"default@example.com\",\n                        name: \"Default User\"\n                    }\n                });\n            }\n            console.log(\"Default user ready:\", defaultUser);\n        } catch (error) {\n            console.error(\"Error with user:\", error);\n            throw new Error(\"Failed to create default user: \" + (error instanceof Error ? error.message : \"Unknown error\"));\n        }\n        // Get or create default category\n        console.log(\"Getting or creating default category...\");\n        let defaultCategory;\n        try {\n            // First, try to find the category\n            defaultCategory = await _lib_prisma__WEBPACK_IMPORTED_MODULE_1__.prisma.category.findFirst({\n                where: {\n                    name: \"Uncategorized\",\n                    userId: defaultUser.id\n                }\n            });\n            // If not found, create it\n            if (!defaultCategory) {\n                console.log(\"Default category not found, creating new one...\");\n                try {\n                    defaultCategory = await _lib_prisma__WEBPACK_IMPORTED_MODULE_1__.prisma.category.create({\n                        data: {\n                            name: \"Uncategorized\",\n                            userId: defaultUser.id,\n                            type: \"EXPENSE\"\n                        }\n                    });\n                } catch (createError) {\n                    // If creation fails due to unique constraint, try to find it again\n                    if (createError instanceof Error && createError.message.includes(\"Unique constraint\")) {\n                        console.log(\"Category already exists, fetching it...\");\n                        defaultCategory = await _lib_prisma__WEBPACK_IMPORTED_MODULE_1__.prisma.category.findFirst({\n                            where: {\n                                name: \"Uncategorized\",\n                                userId: defaultUser.id\n                            }\n                        });\n                    } else {\n                        throw createError;\n                    }\n                }\n            }\n            if (!defaultCategory) {\n                throw new Error(\"Failed to get or create default category\");\n            }\n            console.log(\"Default category ready:\", defaultCategory);\n        } catch (error) {\n            console.error(\"Error with category:\", error);\n            throw new Error(\"Failed to create default category: \" + (error instanceof Error ? error.message : \"Unknown error\"));\n        }\n        // Save document and transactions to database\n        console.log(\"Saving document and transactions to database...\");\n        let document; // Use any type to avoid TypeScript errors with transactions property\n        try {\n            // Log the transactions for debugging\n            console.log(\"Transactions to save:\", JSON.stringify(analysis.transactions, null, 2));\n            // Validate and sanitize transactions before saving\n            const validTransactions = analysis.transactions.filter((tx)=>{\n                // Filter out transactions with invalid amounts\n                if (typeof tx.amount !== \"number\" || isNaN(tx.amount)) {\n                    console.warn(`Skipping transaction with invalid amount: ${tx.description}`);\n                    return false;\n                }\n                // Validate transaction type\n                if (tx.type !== \"INCOME\" && tx.type !== \"EXPENSE\") {\n                    console.warn(`Fixing invalid transaction type for: ${tx.description}`);\n                    tx.type = \"EXPENSE\"; // Default to EXPENSE if invalid\n                }\n                // Validate date\n                try {\n                    const date = new Date(tx.date);\n                    if (isNaN(date.getTime())) {\n                        console.warn(`Fixing invalid date for: ${tx.description}`);\n                        tx.date = new Date().toISOString().split(\"T\")[0]; // Use today's date if invalid\n                    }\n                } catch (e) {\n                    console.warn(`Fixing invalid date format for: ${tx.description}`);\n                    tx.date = new Date().toISOString().split(\"T\")[0]; // Use today's date if invalid\n                }\n                // Validate description\n                if (!tx.description || typeof tx.description !== \"string\") {\n                    console.warn(`Fixing missing description for transaction`);\n                    tx.description = \"Unnamed transaction\";\n                }\n                return true;\n            }).map((tx)=>{\n                // Ensure the date is properly formatted\n                let date;\n                try {\n                    date = new Date(tx.date);\n                    if (isNaN(date.getTime())) {\n                        console.warn(`Using today's date for: ${tx.description}`);\n                        date = new Date(); // Use today's date if invalid\n                    }\n                } catch (e) {\n                    console.warn(`Using today's date due to error: ${e.message}`);\n                    date = new Date(); // Use today's date if there's an error\n                }\n                // Ensure amount is a valid number\n                const amount = typeof tx.amount === \"number\" ? tx.amount : parseFloat(tx.amount);\n                return {\n                    date: date,\n                    description: String(tx.description).substring(0, 255),\n                    amount: isNaN(amount) ? 0 : amount,\n                    type: tx.type === \"INCOME\" ? \"INCOME\" : \"EXPENSE\",\n                    categoryId: defaultCategory.id,\n                    userId: defaultUser.id\n                };\n            });\n            // Ensure we have at least one transaction\n            if (validTransactions.length === 0) {\n                console.warn(\"No valid transactions found, adding a default transaction\");\n                validTransactions.push({\n                    date: new Date(),\n                    description: \"Default transaction (no valid transactions detected)\",\n                    amount: 100,\n                    type: \"EXPENSE\",\n                    categoryId: defaultCategory.id,\n                    userId: defaultUser.id\n                });\n            }\n            document = await _lib_prisma__WEBPACK_IMPORTED_MODULE_1__.prisma.document.create({\n                data: {\n                    fileName: validatedData.fileName,\n                    fileType: file.mimetype,\n                    fileSize: file.size,\n                    status: \"COMPLETED\",\n                    userId: defaultUser.id,\n                    transactions: {\n                        create: validTransactions\n                    }\n                },\n                include: {\n                    transactions: true\n                }\n            });\n            console.log(\"Document and transactions saved successfully\");\n        } catch (error) {\n            console.error(\"Error saving to database:\", error);\n            // Try to create document without transactions if that's causing the error\n            try {\n                console.log(\"Attempting to save document without transactions...\");\n                document = await _lib_prisma__WEBPACK_IMPORTED_MODULE_1__.prisma.document.create({\n                    data: {\n                        fileName: validatedData.fileName,\n                        fileType: file.mimetype,\n                        fileSize: file.size,\n                        status: \"COMPLETED\",\n                        userId: defaultUser.id\n                    }\n                });\n                console.log(\"Document saved without transactions\");\n            } catch (fallbackError) {\n                console.error(\"Failed to save document without transactions:\", fallbackError);\n                throw new Error(\"Failed to save document and transactions to database\");\n            }\n        }\n        return res.status(200).json({\n            document,\n            analysis: {\n                summary: analysis.summary,\n                transactions: document?.transactions || []\n            }\n        });\n    } catch (error) {\n        console.error(\"Error processing document:\", error);\n        if (error instanceof zod__WEBPACK_IMPORTED_MODULE_2__.z.ZodError) {\n            return res.status(400).json({\n                error: \"Invalid input data\",\n                details: error.errors.map((err)=>({\n                        path: err.path.join(\".\"),\n                        message: err.message\n                    }))\n            });\n        }\n        // Log the full error stack for debugging\n        if (error instanceof Error) {\n            console.error(\"Error stack:\", error.stack);\n        }\n        return res.status(500).json({\n            error: \"Failed to process document\",\n            details: error instanceof Error ? error.message : \"Unknown error\",\n            stack:  true && error instanceof Error ? error.stack : undefined\n        });\n    }\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./src/pages/api/documents/upload.ts\n");

/***/ }),

/***/ "(api)/./src/utils/gemini.ts":
/*!*****************************!*\
  !*** ./src/utils/gemini.ts ***!
  \*****************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   analyzeFinancialDocument: () => (/* binding */ analyzeFinancialDocument)\n/* harmony export */ });\n/* harmony import */ var _google_generative_ai__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @google/generative-ai */ \"@google/generative-ai\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_google_generative_ai__WEBPACK_IMPORTED_MODULE_0__]);\n_google_generative_ai__WEBPACK_IMPORTED_MODULE_0__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n// Initialize the Gemini client with proper error handling\nconst apiKey = \"AIzaSyAuF2srEDs_ZCRFDpZKPZDjT3RIqATeQJ8\";\nif (!apiKey) {\n    throw new Error(\"NEXT_PUBLIC_GEMINI_API_KEY environment variable is not set\");\n}\nconst genAI = new _google_generative_ai__WEBPACK_IMPORTED_MODULE_0__.GoogleGenerativeAI(apiKey);\nasync function analyzeFinancialDocument(text) {\n    try {\n        console.log(\"Raw text for analysis:\", text.substring(0, 500) + (text.length > 500 ? \"...\" : \"\"));\n        if (!text || text.trim().length < 10) {\n            console.error(\"Text is too short for analysis:\", text);\n            return {\n                transactions: [],\n                summary: {\n                    totalIncome: 0,\n                    totalExpense: 0,\n                    netSavings: 0\n                },\n                categories: [],\n                financialScore: {\n                    score: 0,\n                    status: \"POOR\",\n                    metrics: {\n                        savingsRate: 0,\n                        expenseDistribution: 0,\n                        incomeStability: 0,\n                        debtToIncome: 0\n                    },\n                    recommendations: [\n                        \"Insufficient data for analysis\"\n                    ]\n                },\n                documentType: \"OTHER\"\n            };\n        }\n        // Detect document type\n        let documentType = \"OTHER\";\n        // Check document type from metadata if available\n        const docTypeMatch = text.match(/DOCUMENT_TYPE:\\s*([A-Z_]+)/);\n        if (docTypeMatch && docTypeMatch[1]) {\n            const detectedType = docTypeMatch[1].trim();\n            if ([\n                \"BANK_STATEMENT\",\n                \"UTILITY_BILL\",\n                \"SALARY_SLIP\",\n                \"FORM_16\",\n                \"CHECK\"\n            ].includes(detectedType)) {\n                documentType = detectedType;\n            }\n        } else {\n            // Fallback detection\n            if (text.toLowerCase().includes(\"salary\") && (text.toLowerCase().includes(\"slip\") || text.toLowerCase().includes(\"pay\"))) {\n                documentType = \"SALARY_SLIP\";\n            } else if (text.toLowerCase().includes(\"form\") && (text.toLowerCase().includes(\"16\") || text.toLowerCase().includes(\"tax\") || text.toLowerCase().includes(\"income\"))) {\n                documentType = \"FORM_16\";\n            } else if (text.toLowerCase().includes(\"cheque\") || text.toLowerCase().includes(\"check\")) {\n                documentType = \"CHECK\";\n            } else if (text.toLowerCase().includes(\"bill\") || text.toLowerCase().includes(\"utility\") || text.toLowerCase().includes(\"electricity\") || text.toLowerCase().includes(\"water\") || text.toLowerCase().includes(\"gas\")) {\n                documentType = \"UTILITY_BILL\";\n            } else if (text.toLowerCase().includes(\"statement\") || text.toLowerCase().includes(\"account\") || text.toLowerCase().includes(\"transaction\")) {\n                documentType = \"BANK_STATEMENT\";\n            }\n        }\n        const model = genAI.getGenerativeModel({\n            model: \"gemini-2.0-flash\"\n        });\n        let prompt;\n        // Customize prompt based on document type\n        if (documentType === \"FORM_16\") {\n            prompt = `\n        You are a tax document analyzer. Analyze the following Form 16 or tax certificate and extract all financial information.\n        \n        Look for:\n        1. Salary details\n        2. Tax deducted at source (TDS)\n        3. Any allowances or deductions\n        4. Total income\n        5. Net taxable income\n        \n        Return ONLY a valid JSON object with the following structure (no markdown formatting, no additional text):\n        {\n          \"transactions\": [\n            {\n              \"date\": \"YYYY-MM-DD\", (use the financial year end date if specific date not available)\n              \"description\": \"detailed description of the income/deduction item\",\n              \"amount\": number,\n              \"category\": \"Salary/TDS/Allowance/Deduction\",\n              \"type\": \"INCOME\" or \"EXPENSE\" (TDS and deductions are EXPENSE, salary and allowances are INCOME)\n            }\n          ],\n          \"summary\": {\n            \"totalIncome\": number,\n            \"totalExpense\": number,\n            \"netSavings\": number\n          },\n          \"categories\": [\n            {\n              \"name\": \"category name\",\n              \"amount\": number,\n              \"percentage\": number\n            }\n          ],\n          \"financialScore\": {\n            \"score\": number (0-100),\n            \"status\": \"EXCELLENT\" or \"GOOD\" or \"FAIR\" or \"POOR\",\n            \"metrics\": {\n              \"savingsRate\": number (percentage of income saved),\n              \"expenseDistribution\": number (0-100, measure of how well distributed expenses are),\n              \"incomeStability\": number (0-100, measure of income stability),\n              \"debtToIncome\": number (debt to income ratio if available)\n            },\n            \"recommendations\": [\n              \"string recommendation 1\",\n              \"string recommendation 2\"\n            ]\n          },\n          \"monthlyData\": [\n            {\n              \"month\": \"YYYY-MM\",\n              \"income\": number,\n              \"expense\": number,\n              \"savings\": number\n            }\n          ]\n        }\n\n        Document text:\n        ${text}\n      `;\n        } else if (documentType === \"SALARY_SLIP\") {\n            prompt = `\n        You are a salary slip analyzer. Analyze the following salary slip and extract all financial information.\n        \n        Look for:\n        1. Basic salary\n        2. Allowances (HRA, DA, TA, etc.)\n        3. Deductions (PF, TDS, etc.)\n        4. Gross salary\n        5. Net salary\n        \n        Return ONLY a valid JSON object with the following structure (no markdown formatting, no additional text):\n        {\n          \"transactions\": [\n            {\n              \"date\": \"YYYY-MM-DD\", (use the salary month date if available)\n              \"description\": \"detailed description of the salary component\",\n              \"amount\": number,\n              \"category\": \"Basic/HRA/DA/TA/PF/TDS/etc.\",\n              \"type\": \"INCOME\" or \"EXPENSE\" (deductions are EXPENSE, earnings are INCOME)\n            }\n          ],\n          \"summary\": {\n            \"totalIncome\": number,\n            \"totalExpense\": number,\n            \"netSavings\": number\n          },\n          \"categories\": [\n            {\n              \"name\": \"category name\",\n              \"amount\": number,\n              \"percentage\": number\n            }\n          ],\n          \"financialScore\": {\n            \"score\": number (0-100),\n            \"status\": \"EXCELLENT\" or \"GOOD\" or \"FAIR\" or \"POOR\",\n            \"metrics\": {\n              \"savingsRate\": number (percentage of income saved),\n              \"expenseDistribution\": number (0-100, measure of how well distributed expenses are),\n              \"incomeStability\": number (0-100, measure of income stability),\n              \"debtToIncome\": number (debt to income ratio if available)\n            },\n            \"recommendations\": [\n              \"string recommendation 1\",\n              \"string recommendation 2\"\n            ]\n          }\n        }\n\n        Document text:\n        ${text}\n      `;\n        } else if (documentType === \"UTILITY_BILL\") {\n            prompt = `\n        You are a utility bill analyzer. Analyze the following utility bill and extract all financial information.\n        \n        Look for:\n        1. Bill amount\n        2. Due date\n        3. Previous balance\n        4. Current charges\n        5. Any taxes or fees\n        \n        Return ONLY a valid JSON object with the following structure (no markdown formatting, no additional text):\n        {\n          \"transactions\": [\n            {\n              \"date\": \"YYYY-MM-DD\", (use the bill date or due date)\n              \"description\": \"detailed description of the charge\",\n              \"amount\": number,\n              \"category\": \"Electricity/Water/Gas/Internet/Phone/etc.\",\n              \"type\": \"EXPENSE\"\n            }\n          ],\n          \"summary\": {\n            \"totalIncome\": number,\n            \"totalExpense\": number,\n            \"netSavings\": number\n          },\n          \"categories\": [\n            {\n              \"name\": \"category name\",\n              \"amount\": number,\n              \"percentage\": number\n            }\n          ],\n          \"financialScore\": {\n            \"score\": number (0-100),\n            \"status\": \"EXCELLENT\" or \"GOOD\" or \"FAIR\" or \"POOR\",\n            \"metrics\": {\n              \"savingsRate\": 0,\n              \"expenseDistribution\": number (0-100, measure of how well distributed expenses are),\n              \"incomeStability\": 0,\n              \"debtToIncome\": 0\n            },\n            \"recommendations\": [\n              \"string recommendation 1\",\n              \"string recommendation 2\"\n            ]\n          }\n        }\n\n        Document text:\n        ${text}\n      `;\n        } else if (documentType === \"CHECK\") {\n            prompt = `\n        You are a check/cheque analyzer. Analyze the following check and extract all financial information.\n        \n        Look for:\n        1. Check amount\n        2. Date\n        3. Payee\n        4. Check number\n        \n        Return ONLY a valid JSON object with the following structure (no markdown formatting, no additional text):\n        {\n          \"transactions\": [\n            {\n              \"date\": \"YYYY-MM-DD\", (use the check date)\n              \"description\": \"Payment to [payee]\",\n              \"amount\": number,\n              \"category\": \"Check Payment\",\n              \"type\": \"EXPENSE\"\n            }\n          ],\n          \"summary\": {\n            \"totalIncome\": 0,\n            \"totalExpense\": number,\n            \"netSavings\": -number\n          },\n          \"categories\": [\n            {\n              \"name\": \"Check Payment\",\n              \"amount\": number,\n              \"percentage\": 100\n            }\n          ],\n          \"financialScore\": {\n            \"score\": 50,\n            \"status\": \"FAIR\",\n            \"metrics\": {\n              \"savingsRate\": 0,\n              \"expenseDistribution\": 0,\n              \"incomeStability\": 0,\n              \"debtToIncome\": 0\n            },\n            \"recommendations\": [\n              \"Insufficient data for detailed recommendations\"\n            ]\n          }\n        }\n\n        Document text:\n        ${text}\n      `;\n        } else {\n            // Bank statement or other document types\n            prompt = `\n        You are a financial document analyzer. Analyze the following financial document text and extract ALL transactions.\n        Even if the text is messy or incomplete, try to identify any possible transactions.\n        Look for patterns like dates, descriptions, and amounts.\n        \n        For amounts, look for numbers that appear to be currency values (they may have ₹ or other currency symbols).\n        For dates, look for any date formats (MM/DD/YYYY, DD-MM-YYYY, etc.).\n        For descriptions, look for text near the dates and amounts that describes the transaction.\n        \n        If you can't find specific categories, use \"Uncategorized\".\n        If you can't determine if it's income or expense, default to \"EXPENSE\".\n        \n        Return ONLY a valid JSON object with the following structure (no markdown formatting, no additional text):\n        {\n          \"transactions\": [\n            {\n              \"date\": \"YYYY-MM-DD\", (use today's date if unclear)\n              \"description\": \"description of transaction\",\n              \"amount\": number,\n              \"category\": \"category of transaction (e.g., Food, Transport, Salary)\",\n              \"type\": \"INCOME\" or \"EXPENSE\"\n            }\n          ],\n          \"summary\": {\n            \"totalIncome\": number,\n            \"totalExpense\": number,\n            \"netSavings\": number\n          },\n          \"categories\": [\n            {\n              \"name\": \"category name\",\n              \"amount\": number,\n              \"percentage\": number\n            }\n          ],\n          \"financialScore\": {\n            \"score\": number (0-100),\n            \"status\": \"EXCELLENT\" or \"GOOD\" or \"FAIR\" or \"POOR\",\n            \"metrics\": {\n              \"savingsRate\": number (percentage of income saved),\n              \"expenseDistribution\": number (0-100, measure of how well distributed expenses are),\n              \"incomeStability\": number (0-100, measure of income stability),\n              \"debtToIncome\": number (debt to income ratio if available)\n            },\n            \"recommendations\": [\n              \"string recommendation 1\",\n              \"string recommendation 2\"\n            ]\n          },\n          \"monthlyData\": [\n            {\n              \"month\": \"YYYY-MM\",\n              \"income\": number,\n              \"expense\": number,\n              \"savings\": number\n            }\n          ]\n        }\n\n        Document text:\n        ${text}\n      `;\n        }\n        try {\n            const result = await model.generateContent(prompt);\n            const responseText = result.response.text();\n            // Try to parse the JSON response\n            try {\n                // Extract JSON from the response if it's wrapped in markdown code blocks\n                let jsonText = responseText;\n                const jsonMatch = responseText.match(/```(?:json)?([\\s\\S]*?)```/);\n                if (jsonMatch && jsonMatch[1]) {\n                    jsonText = jsonMatch[1].trim();\n                }\n                const analysis = JSON.parse(jsonText);\n                // Ensure all required properties exist\n                if (!analysis.transactions) analysis.transactions = [];\n                if (!analysis.summary) {\n                    analysis.summary = {\n                        totalIncome: 0,\n                        totalExpense: 0,\n                        netSavings: 0\n                    };\n                }\n                if (!analysis.categories) analysis.categories = [];\n                // Add financial score if not present\n                if (!analysis.financialScore) {\n                    // Calculate financial score\n                    const savingsRate = analysis.summary.totalIncome > 0 ? analysis.summary.netSavings / analysis.summary.totalIncome * 100 : 0;\n                    let score = 0;\n                    let status = \"POOR\";\n                    // Simple scoring algorithm\n                    if (savingsRate >= 30) {\n                        score = 90; // Excellent savings rate\n                        status = \"EXCELLENT\";\n                    } else if (savingsRate >= 20) {\n                        score = 80; // Good savings rate\n                        status = \"GOOD\";\n                    } else if (savingsRate >= 10) {\n                        score = 60; // Fair savings rate\n                        status = \"FAIR\";\n                    } else if (savingsRate > 0) {\n                        score = 40; // Poor but positive savings rate\n                        status = \"POOR\";\n                    } else {\n                        score = 20; // Negative savings rate\n                        status = \"POOR\";\n                    }\n                    // Calculate expense distribution score (how diversified expenses are)\n                    const expenseDistribution = analysis.categories.length > 1 ? Math.min(100, analysis.categories.length * 10) : 0;\n                    // Calculate income stability (if there are multiple income transactions)\n                    const incomeTransactions = analysis.transactions.filter((t)=>t.type === \"INCOME\");\n                    const incomeStability = incomeTransactions.length > 1 ? 80 : 50; // Simple heuristic\n                    analysis.financialScore = {\n                        score,\n                        status,\n                        metrics: {\n                            savingsRate,\n                            expenseDistribution,\n                            incomeStability,\n                            debtToIncome: 0 // Default, as we don't have debt information\n                        },\n                        recommendations: []\n                    };\n                    // Add recommendations based on score\n                    if (savingsRate < 10) {\n                        analysis.financialScore.recommendations.push(\"Increase your savings rate to at least 10% of income\");\n                    }\n                    if (savingsRate < 0) {\n                        analysis.financialScore.recommendations.push(\"Your expenses exceed your income. Consider reducing non-essential expenses\");\n                    }\n                    if (expenseDistribution < 50) {\n                        analysis.financialScore.recommendations.push(\"Diversify your expenses across more categories for better financial health\");\n                    }\n                }\n                // Add document type\n                analysis.documentType = documentType;\n                // Generate monthly data if not present\n                if (!analysis.monthlyData && analysis.transactions.length > 0) {\n                    const monthlyMap = new Map();\n                    analysis.transactions.forEach((tx)=>{\n                        try {\n                            const date = new Date(tx.date);\n                            const monthKey = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, \"0\")}`;\n                            if (!monthlyMap.has(monthKey)) {\n                                monthlyMap.set(monthKey, {\n                                    income: 0,\n                                    expense: 0,\n                                    savings: 0\n                                });\n                            }\n                            const monthData = monthlyMap.get(monthKey);\n                            if (tx.type === \"INCOME\") {\n                                monthData.income += tx.amount;\n                            } else {\n                                monthData.expense += tx.amount;\n                            }\n                            monthData.savings = monthData.income - monthData.expense;\n                        } catch (e) {\n                            console.error(\"Error processing transaction date:\", e);\n                        }\n                    });\n                    // Convert map to array and sort by month\n                    analysis.monthlyData = Array.from(monthlyMap.entries()).map(([month, data])=>({\n                            month,\n                            ...data\n                        })).sort((a, b)=>a.month.localeCompare(b.month));\n                }\n                return analysis;\n            } catch (parseError) {\n                console.error(\"Error parsing Gemini response:\", parseError);\n                console.error(\"Invalid JSON response:\", responseText);\n                // Return a default structure with appropriate dummy transactions\n                const today = new Date().toISOString().split(\"T\")[0];\n                // Create a default analysis result with financial score\n                const defaultAnalysis = {\n                    transactions: [\n                        {\n                            date: today,\n                            description: \"Error parsing response - sample transaction\",\n                            amount: 100,\n                            category: \"Other\",\n                            type: \"EXPENSE\"\n                        }\n                    ],\n                    summary: {\n                        totalIncome: 0,\n                        totalExpense: 100,\n                        netSavings: -100\n                    },\n                    categories: [\n                        {\n                            name: \"Other\",\n                            amount: 100,\n                            percentage: 100\n                        }\n                    ],\n                    financialScore: {\n                        score: 20,\n                        status: \"POOR\",\n                        metrics: {\n                            savingsRate: 0,\n                            expenseDistribution: 0,\n                            incomeStability: 0,\n                            debtToIncome: 0\n                        },\n                        recommendations: [\n                            \"Insufficient data for detailed analysis\",\n                            \"Try uploading a clearer document\"\n                        ]\n                    },\n                    documentType: documentType\n                };\n                return defaultAnalysis;\n            }\n        } catch (error) {\n            console.error(\"Error in Gemini analysis:\", error);\n            // Return a default structure with a dummy transaction\n            const today = new Date().toISOString().split(\"T\")[0];\n            return {\n                transactions: [\n                    {\n                        date: today,\n                        description: \"Error in analysis - sample transaction\",\n                        amount: 100,\n                        category: \"Other\",\n                        type: \"EXPENSE\"\n                    }\n                ],\n                summary: {\n                    totalIncome: 0,\n                    totalExpense: 100,\n                    netSavings: -100\n                },\n                categories: [\n                    {\n                        name: \"Other\",\n                        amount: 100,\n                        percentage: 100\n                    }\n                ],\n                financialScore: {\n                    score: 20,\n                    status: \"POOR\",\n                    metrics: {\n                        savingsRate: 0,\n                        expenseDistribution: 0,\n                        incomeStability: 0,\n                        debtToIncome: 0\n                    },\n                    recommendations: [\n                        \"Error processing document\",\n                        \"Try uploading a clearer document\"\n                    ]\n                },\n                documentType: documentType\n            };\n        }\n    } catch (error) {\n        console.error(\"Error in Gemini analysis:\", error);\n        // Return a default structure with a dummy transaction\n        const today = new Date().toISOString().split(\"T\")[0];\n        return {\n            transactions: [\n                {\n                    date: today,\n                    description: \"Error in analysis - sample transaction\",\n                    amount: 100,\n                    category: \"Other\",\n                    type: \"EXPENSE\"\n                }\n            ],\n            summary: {\n                totalIncome: 0,\n                totalExpense: 100,\n                netSavings: -100\n            },\n            categories: [\n                {\n                    name: \"Other\",\n                    amount: 100,\n                    percentage: 100\n                }\n            ],\n            financialScore: {\n                score: 20,\n                status: \"POOR\",\n                metrics: {\n                    savingsRate: 0,\n                    expenseDistribution: 0,\n                    incomeStability: 0,\n                    debtToIncome: 0\n                },\n                recommendations: [\n                    \"Error processing document\",\n                    \"Try uploading a clearer document\"\n                ]\n            },\n            documentType: \"OTHER\"\n        };\n    }\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./src/utils/gemini.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fdocuments%2Fupload&preferredRegion=&absolutePagePath=.%2Fsrc%2Fpages%2Fapi%2Fdocuments%2Fupload.ts&middlewareConfigBase64=e30%3D!")));
module.exports = __webpack_exports__;

})();